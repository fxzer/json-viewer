---
description: 
globs: 
alwaysApply: false
---
# 样式和主题管理

JSON Viewer项目使用UnoCSS（Tailwind兼容模式）和SCSS进行样式管理，支持暗色和亮色主题切换。

## 样式技术栈

- **UnoCSS**：原子化CSS框架，提供Tailwind兼容的功能
- **SCSS**：CSS预处理器，用于全局样式和主题管理
- **scoped样式**：Vue组件中的作用域样式
- **CSS变量**：用于主题切换

## 全局样式

全局样式定义在`src/main.scss`文件中：

```scss
/* 全局样式示例 */
:root {
  --primary-color: #1890ff;
  --success-color: #52c41a;
  --warning-color: #faad14;
  --error-color: #f5222d;
  --font-size-base: 14px;
  --border-radius-base: 4px;
}

/* 暗色主题变量 */
html.dark {
  --primary-color: #177ddc;
  --success-color: #49aa19;
  --warning-color: #d89614;
  --error-color: #d32029;
  --bg-color: #141414;
  --text-color: rgba(255, 255, 255, 0.85);
}

body {
  font-size: var(--font-size-base);
  color: var(--text-color, rgba(0, 0, 0, 0.85));
  background-color: var(--bg-color, #fff);
  transition: background-color 0.3s, color 0.3s;
}
```

## 组件样式

组件样式使用`<style scoped>`标签定义，与组件模板放在同一文件：

```vue
<template>
  <div class="component">
    <!-- 组件内容 -->
  </div>
</template>

<style scoped>
.component {
  padding: 16px;
  margin: 8px;
  border-radius: var(--border-radius-base);
}
</style>
```

## UnoCSS/Tailwind使用

项目使用UnoCSS的Tailwind兼容模式，可以直接在模板中使用Tailwind类：

```vue
<template>
  <div class="flex items-center p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
    <button class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded">
      按钮
    </button>
  </div>
</template>
```

## 主题切换

主题切换通过在`<html>`标签上添加或移除`.dark`类实现：

```ts
// 主题切换函数
function toggleDarkMode(isDark: boolean) {
  if (isDark) {
    document.documentElement.classList.add('dark')
    // 对于ElementPlus等UI库
    document.documentElement.setAttribute('data-theme', 'dark')
  } else {
    document.documentElement.classList.remove('dark')
    document.documentElement.setAttribute('data-theme', 'light')
  }
  
  // 存储设置
  localStorage.setItem('theme', isDark ? 'dark' : 'light')
}

// 初始化主题
function initTheme() {
  const savedTheme = localStorage.getItem('theme')
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
  
  const shouldUseDark = savedTheme === 'dark' || (!savedTheme && prefersDark)
  toggleDarkMode(shouldUseDark)
}

// 监听系统主题变化
window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
  const newColorScheme = e.matches ? 'dark' : 'light'
  // 如果用户未明确设置主题，则跟随系统
  if (!localStorage.getItem('theme')) {
    toggleDarkMode(e.matches)
  }
})
```

## 自定义主题色

使用CSS变量实现用户自定义主题色：

```ts
// 设置主题色
function setThemeColor(color: string) {
  // 验证颜色格式
  if (!/^#[0-9A-F]{6}$/i.test(color)) {
    console.error('无效的颜色格式')
    return
  }
  
  document.documentElement.style.setProperty('--primary-color', color)
  
  // 生成衍生色
  // 这里可以使用color库生成不同深浅的颜色
  // 例如使用tinycolor2等库
  const darkerColor = darken(color, 10)
  const lighterColor = lighten(color, 10)
  
  document.documentElement.style.setProperty('--primary-color-dark', darkerColor)
  document.documentElement.style.setProperty('--primary-color-light', lighterColor)
  
  // 存储设置
  localStorage.setItem('theme-color', color)
}
```

## CSS变量命名规范

CSS变量应遵循以下命名规范：

1. 使用`--`前缀
2. 使用kebab-case命名方式
3. 按功能或组件分组命名

```css
/* 颜色变量 */
--color-primary: #1890ff;
--color-primary-light: #40a9ff;
--color-primary-dark: #096dd9;

/* 字体变量 */
--font-size-sm: 12px;
--font-size-md: 14px;
--font-size-lg: 16px;

/* 间距变量 */
--spacing-xs: 4px;
--spacing-sm: 8px;
--spacing-md: 16px;
--spacing-lg: 24px;

/* 组件特定变量 */
--button-height: 32px;
--button-padding: 0 15px;
--button-border-radius: 4px;
```

## 响应式设计

使用媒体查询和UnoCSS/Tailwind的响应式工具实现：

```vue
<template>
  <div class="w-full md:w-1/2 lg:w-1/3 p-4">
    <!-- 响应式内容 -->
  </div>
</template>

<style>
/* 可以在全局样式中定义一些额外的响应式工具 */
@media (max-width: 768px) {
  :root {
    --font-size-base: 12px;
    --spacing-md: 12px;
  }
}
</style>
```
